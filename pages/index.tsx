import Head from 'next/head'
import { GetServerSideProps } from 'next'
import { createServerSupabaseClient } from '@supabase/auth-helpers-nextjs'

type MembersType = {
  id: string;
  nombre: string;
  apellidos: string;
  fecha: string;
  telefono?: string;
  email?: string;
  roles?: { 
    descripcion?: string;
  };
  status?: {
    descripcion?: string;
  }
}

export const getServerSideProps:GetServerSideProps = async(ctx) => {
  const supabase = createServerSupabaseClient(ctx)
  const { data: { session }} = await supabase.auth.getSession()
  
  let members:Array<MembersType> = [];
  let isAdmin = false;
  if(session){
    const { data, error } = await supabase.from('members')
      .select()
      .eq('id', session.user.id)
      .eq('rol', 1)
    if(error) console.log('looking for admin', error)
    isAdmin = (data && data?.length > 0) ?? false;
    if(isAdmin){
      const { data, error } = (await supabase.from('members').select('id, nombre, apellidos, fecha, telefono, email, roles(descripcion), status(descripcion)'))
      if(error) console.log('members as admin', error)
      members = data as MembersType[]
    }else{
      const { data, error } = (await supabase.from('members').select('id, nombre, apellidos, fecha, status(descripcion)'))
      if(error) console.log('members as regular', error)
      members = data as MembersType[]
    }
  }
  return {
    props: {
      isAdmin,
      members
    }
  }
}

export default function Home({isAdmin, members}:{isAdmin: boolean, members: MembersType[]}) {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      {isAdmin ? (
        <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
          <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
              <td>ID</td>
              <td>Estado</td>
              <td>Nombre</td>
              <td>Apellidos</td>
              <td>Cumpleaños</td>
              <td>Teléfono</td>
              <td>Email</td>
              <td>Rol</td>
            </tr>
          </thead>
          <tbody>
          {members.map((member:MembersType) => (
            <tr key={member.id}>
              <td>{member.id}</td>
              <td>{member.status?.descripcion}</td>
              <td>{member.nombre}</td>
              <td>{member.apellidos}</td>
              <td>{member.fecha}</td>
              <td>{member.telefono}</td>
              <td>{member.email}</td>
              <td>{member.roles?.descripcion}</td>
            </tr>
          ))}
          </tbody>
        </table>
        
      ):(
        <table>
          <thead>
            <tr>
              <td>ID</td>
              <td>Estado</td>
              <td>Nombre</td>
              <td>Apellidos</td>
              <td>Cumpleaños</td>
            </tr>
          </thead>
          <tbody>
            {members.map((member:MembersType) => (
              <tr key={member.id}>
                <td>{member.id}</td>
                <td>{member.status?.descripcion}</td>
                <td>{member.nombre}</td>
                <td>{member.apellidos}</td>
                <td>{member.fecha}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  )
}
